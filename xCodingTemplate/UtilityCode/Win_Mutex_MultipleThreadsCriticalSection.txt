#include <iostream>
#include <Windows.h>
#include <process.h>

using namespace std;

int l_count;

CRITICAL_SECTION cs;

unsigned __stdcall ThreadFunA(void * pM)
{
    for(int i = 0; i != 500; ++i)
    {
        //EnterCriticalSection(&cs);

        ++l_count;
        Sleep(1);

        //LeaveCriticalSection(&cs);
    }
    return 0;
}

unsigned __stdcall ThreadFunB(void * pM)
{
    for (int i = 0; i != 500; ++i)
    {
        //EnterCriticalSection(&cs);

        ++l_count;
        Sleep(1);

        //LeaveCriticalSection(&cs);
    }
    return 0;
}

int main() {
    
    InitializeCriticalSection(&cs);
    l_count = 0;

    HANDLE hThreads[2];
    hThreads[0] = (HANDLE)_beginthreadex(NULL, 0, ThreadFunA, NULL, 0, NULL);
    hThreads[1] = (HANDLE)_beginthreadex(NULL, 0, ThreadFunB, NULL, 0, NULL);
    WaitForMultipleObjects(2, hThreads, true, INFINITE);

    cout << "l_count = " << l_count << endl;

    DeleteCriticalSection(&cs);

    return 0;
}
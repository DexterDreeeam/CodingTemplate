#include <iostream>
#include <Windows.h>
#include <process.h>

using namespace std;

HANDLE hEvent;

unsigned __stdcall ThreadFun(void * pM)
{
    WaitForSingleObject(hEvent, INFINITE);

    cout << "Hello World from Thread : \"" << GetCurrentThreadId() << endl;

    SetEvent(hEvent);

    return 0;
}

int main()
{
    //prmt 1 : secure parameter
    //prmt 2 : auto-call or not
    //         Auto-call ResetEvent() when call the function WaitForSingleObject()
    //prmt 3 : initial set or not
    //prmt 4 : event name
    hEvent = CreateEvent(NULL, false, true, NULL);
    HANDLE hThreads[5];

    for(int i = 0; i != 5; ++i)
    {
        hThreads[i] = (HANDLE)_beginthreadex(NULL, 0, ThreadFun, NULL, 0, NULL);
    }
    WaitForMultipleObjects(5, hThreads, true, INFINITE);

    cout << "All Threads are done" << endl;
    CloseHandle(hEvent);

    system("pause");
    return 0;
}
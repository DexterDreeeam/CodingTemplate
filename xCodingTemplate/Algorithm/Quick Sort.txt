//øÏÀŸ≈≈–Ú xCpp

#include <vector>
#include <iostream>
using namespace std;

typedef int __ssize_t;

template<typename _T>
pair<__ssize_t, __ssize_t> partition(vector<_T> & vec, __ssize_t l, __ssize_t r) {
	__ssize_t less = l - 1, more = r;
	while (l < more) {
		if (vec[l] < vec[r])
			swap(vec[l++], vec[++less]);
		else if (vec[l] > vec[r])
			swap(vec[l], vec[--more]);
		else
			++l;
	}
	swap(vec[r], vec[more]);
	return make_pair(less + 1, more);
}

template<typename _T>
void quick_sort(vector<_T> & vec, __ssize_t l, __ssize_t r) {
	if (l < r) {
		pair<__ssize_t, __ssize_t> p = partition(vec, l, r);
		quick_sort(vec, l, p.first - 1);
		quick_sort(vec, p.second + 1, r);
	}
}

int main() {
	vector<int> v = { 1,8,3,4,4,6,1,2,0 };
	__ssize_t start = 0;
	__ssize_t end = v.size() - 1;
	quick_sort(v, start, end);
	for (auto i : v) {
		cout << i << " ";
	}
	return 0;
}